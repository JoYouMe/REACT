1. JSX
    - 자바스크립트의 확장 문법이며 XML과 매우 유사
    - 브라우저 실행되기 전에 일반 자바스크립트 코드로 변환됨
    - 보기 편하고 HTML 코드를 작성하는 것과 비슷함
    - JSX 코드로 작성된 컴포넌트는 태그처럼 사용 가능

2. JSX 문법
    - 컴포넌트에 여러가지 요소가 포함되면 반드시 부모요소 하나로 묶어줘야 됨
    - 부모요소는 대부분 <Fragment></Fragment>,<> </>(Fragment의 다른 표현), <div></div>등으로 사용
    - 자바스크립트의 표현식으로 사용 가능, { }로 감싸서 사용
    - if문이 지원이 안되기때문에 삼항조건연산자 사용
    - &&연산자를 이용한 조건부 렌더링 가능
    - 컴포넌트나 태그에 인라인 스타일을 사용할 경우 카멜케이스 표기법 사용
        background-color => backgroundColor
    - class 대신 className을 사용
    - HTML에서는 닫는 태그가 존재하는 태그들을 닫지 않아도 에러가 발생하지 않지만
        JSX에서는 닫는 태그를 닫지 않으면 에러 발생
    - JSX에서 주석은 {/**/}로 사용

3. React의 Component
    - 클래스형 컴포넌트, 함수형 컴포넌트 (형태 두가지 존재)
    - React 공식 문서에는 함수형 컴포넌트와 Hooks를 사용하는 것을 권장

4. 클래스형 컴포넌트
    - class 컴포넌트명 extends Component {
        render(){

        }
    }
    - class안에서 render 메소드를 호출하여 렌더링 진행

5. 함수형 컴포넌트
    - function 컴포넌트명() {
        return;
    }
    - const 컴포넌트명 = () => {
        return;
    }
    - return문을 이용하여 렌더링 진행
    - class형 컴포넌트와 함수형 컴포넌트의 성능은 비슷하지만 함수형 컴포넌트가 메모리를 적게 사용

6. props
    - props는 컴포넌트의 속성 값
    - 컴포넌트의 속성을 설정할 때 사용
    - props 값들은 부모 컴포넌트에서만 지정 가능
    - props의 기본 값 설정
        컴포턴트 안에서 defaultProps 키워드로 설정
    - props 값들의 변경은 부모 컴포넌트에서만 가능

7. children
    - props의 속성 값 중 하나
    - 컴포넌트가 호출된 태그 사이의 내용을 담고 있는 속성

8. 부모 컴포넌트와 자식 컴포넌트
    - 호출하는 컴포넌트가 부모 컴포넌트, 호출당하는 컴포넌트가 자식 컴포넌트
    - 호출하는 컴포넌트에서 호출당하는 컴포넌트의 props 값을 지정 가능

9. props의 비구조화 할당
    - ES6의 비구조화 할당 문법으로 props 나눠서 사용 가능

10. state
    - 현재 자신 컴포넌트에서 변경할 수 있는 속성 값
    - class형 컴포넌트에서만 사용 가능
    - 함수형 컴포넌트에서는 usestate라는 Hooks로 state대신 사용
    - usestate를 사용할때는 속성 값과 속성 값을 설정하는 setter 메소드를 한 쌍으로 선언

11. state 사용 시 주의점
    - state 반드시 setter 함수 이용
    - 부모 컴포넌트의 state를 자식 컴포넌트의 props로 전달하여 사용

12. React 이벤트 핸들링
    - 카멜케이스 표기법 사용 (onclick => onClick, onkeyup => onKeyUp)
    - 이벤트에서 실행할 내용은 일반 자바스크립트 코드 형태가 아니고 함수 형태로 전달
    - 이벤트에 직접 화살표 함수를 전달 가능, 외부 함수를 만들어 전달 가능
    - DOM 요소에만 이벤트 등록 가능하고 컴포넌트에는 이벤트 등록 불가능

13. 리액트에서 DOM 요소에 이름 달기
    - HTMl에서는 DOM 요소에 이름을 달 때 id, class를 주로 사용
    - JSX에서는 ref를 주로 사용 
    - JSX에서도 id 사용 가능하지만 같은 컴포넌트를 여러개 사용했을 때 동일한 id의 DOM 요소가 여러개 생성되어 id 유일성이 파괴됨
    - JSX는 ref 사용하여 같은 컴포넌트가 여러개 생성되어도 다른 ref 값을 갖도록 설정 가능

14. useRef
    - 특정 DOM 요소나 특정 컴포넌트에 직접 접근해야 할 때 ref 달아서 접근